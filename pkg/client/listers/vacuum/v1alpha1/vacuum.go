/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/simonswine/rocklet/pkg/apis/vacuum/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VacuumLister helps list Vacuums.
type VacuumLister interface {
	// List lists all Vacuums in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Vacuum, err error)
	// Vacuums returns an object that can list and get Vacuums.
	Vacuums(namespace string) VacuumNamespaceLister
	VacuumListerExpansion
}

// vacuumLister implements the VacuumLister interface.
type vacuumLister struct {
	indexer cache.Indexer
}

// NewVacuumLister returns a new VacuumLister.
func NewVacuumLister(indexer cache.Indexer) VacuumLister {
	return &vacuumLister{indexer: indexer}
}

// List lists all Vacuums in the indexer.
func (s *vacuumLister) List(selector labels.Selector) (ret []*v1alpha1.Vacuum, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Vacuum))
	})
	return ret, err
}

// Vacuums returns an object that can list and get Vacuums.
func (s *vacuumLister) Vacuums(namespace string) VacuumNamespaceLister {
	return vacuumNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VacuumNamespaceLister helps list and get Vacuums.
type VacuumNamespaceLister interface {
	// List lists all Vacuums in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Vacuum, err error)
	// Get retrieves the Vacuum from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Vacuum, error)
	VacuumNamespaceListerExpansion
}

// vacuumNamespaceLister implements the VacuumNamespaceLister
// interface.
type vacuumNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Vacuums in the indexer for a given namespace.
func (s vacuumNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Vacuum, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Vacuum))
	})
	return ret, err
}

// Get retrieves the Vacuum from the indexer for a given namespace and name.
func (s vacuumNamespaceLister) Get(name string) (*v1alpha1.Vacuum, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vacuum"), name)
	}
	return obj.(*v1alpha1.Vacuum), nil
}
